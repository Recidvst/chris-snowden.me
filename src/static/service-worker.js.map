{"version":3,"file":"service-worker.js","sources":["../../node_modules/workbox-core/_version.js","../../node_modules/workbox-core/models/messages/messageGenerator.js","../../node_modules/workbox-core/_private/WorkboxError.js","../../node_modules/workbox-core/_private/logger.js","../../node_modules/workbox-core/_private/cacheNames.js","../../node_modules/workbox-core/_private/getFriendlyURL.js","../../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../../node_modules/workbox-core/_private/Deferred.js","../../node_modules/workbox-core/models/quotaErrorCallbacks.js","../../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../../node_modules/workbox-core/_private/timeout.js","../../node_modules/workbox-strategies/_version.js","../../node_modules/workbox-strategies/StrategyHandler.js","../../node_modules/workbox-strategies/Strategy.js","../../node_modules/workbox-strategies/CacheFirst.js","../../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../../node_modules/workbox-strategies/NetworkFirst.js","../../node_modules/workbox-strategies/StaleWhileRevalidate.js","../../node_modules/workbox-core/_private/waitUntil.js","../../node_modules/workbox-precaching/_version.js","../../node_modules/workbox-precaching/utils/createCacheKey.js","../../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../../node_modules/workbox-core/copyResponse.js","../../node_modules/workbox-precaching/PrecacheStrategy.js","../../node_modules/workbox-precaching/PrecacheController.js","../../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../../node_modules/workbox-routing/_version.js","../../node_modules/workbox-routing/utils/constants.js","../../node_modules/workbox-routing/utils/normalizeHandler.js","../../node_modules/workbox-routing/Route.js","../../node_modules/workbox-routing/RegExpRoute.js","../../node_modules/workbox-routing/Router.js","../../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../../node_modules/workbox-routing/registerRoute.js","../../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../../node_modules/workbox-precaching/utils/generateURLVariations.js","../../node_modules/workbox-precaching/PrecacheRoute.js","../../node_modules/workbox-precaching/addRoute.js","../../node_modules/workbox-precaching/matchPrecache.js","../../node_modules/workbox-precaching/precache.js","../../node_modules/workbox-precaching/precacheAndRoute.js","../../node_modules/workbox-cacheable-response/_version.js","../../node_modules/workbox-cacheable-response/CacheableResponse.js","../../node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","../../node_modules/workbox-routing/setCatchHandler.js","../../node_modules/workbox-core/_private/dontWaitFor.js","../../node_modules/workbox-core/_private/DBWrapper.js","../../node_modules/workbox-core/_private/deleteDatabase.js","../../node_modules/workbox-expiration/_version.js","../../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../../node_modules/workbox-expiration/CacheExpiration.js","../../node_modules/workbox-core/registerQuotaErrorCallback.js","../../node_modules/workbox-expiration/ExpirationPlugin.js","../assets/js/service-worker/service-worker.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.1.5'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\n    fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = { ...matchOptions, ignoreSearch: true };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof module:workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.1.5'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return (typeof input === 'string') ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {module:workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     *     [match callback]{@link module:workbox-routing~matchCallback},\n     *     (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * [match callback]{@link module:workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail') ?\n            request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            throw new WorkboxError('plugin-error-request-will-fetch', {\n                thrownError: err,\n            });\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ?\n                undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = { ...matchOptions, ...{ cacheName } };\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse = (await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event,\n            })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(\n        // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) :\n            null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ?\n                responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n            if (error.name === 'QuotaExceededError') {\n                await executeQuotaErrorCallbacks();\n            }\n            throw error;\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        if (!this._cacheKeys[mode]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    params: this.params,\n                }));\n            }\n            this._cacheKeys[mode] = effectiveRequest;\n        }\n        return this._cacheKeys[mode];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = { ...param, state };\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while (promise = this._extendLifetimePromises.shift()) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve();\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache = (await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event,\n            })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof module:workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * [workbox-core]{@link module:workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * [route]{@link module:workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to [`handle()`]{@link module:workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of [response, done] promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string' ?\n            new Request(options.request) :\n            options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                response = await callback({ error, event, request });\n                if (response) {\n                    break;\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            error = waitUntilError;\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the [`handler`]{@link module:workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {module:workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof module:workbox-strategies.Strategy\n */\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network}\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                error = err;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, logs, handler });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return await handler.waitUntil(Promise.race(promises)) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                await networkPromise;\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            error = fetchError;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler\n            .fetchAndCachePut(request)\n            .catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.1.5'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                // TODO: `state` should never be undefined...\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                }\n                else {\n                    this.updatedURLs.push(url);\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            const cacheKey = params && params.cacheKey ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            return cacheKey ? new Request(cacheKey) : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ?\n        clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A [Strategy]{@link module:workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (!response) {\n            // If this is an `install` event then populate the cache. If this is a\n            // `fetch` event (or any other event) then respond with the cached\n            // response.\n            if (handler.event && handler.event.type === 'install') {\n                return await this._handleInstall(request, handler);\n            }\n            return await this._handleFetch(request, handler);\n        }\n        return response;\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        // Fall back to the network if we don't have a cached response\n        // (perhaps due to manual cache cleanup).\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network instead.`);\n            }\n            response = await handler.fetch(request);\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = handler.params && handler.params.cacheKey ||\n                await handler.getCacheKey(request, 'read');\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` +\n                getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey.url)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    }\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    }\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {module:workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\n                'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<module:workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {module:workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = { cacheKey, ...options.params };\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.1.5'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {module:workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        err = catchErr;\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do. \n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of [Route]{@link module:workbox-routing.Route} that takes a\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof module:workbox-precaching\n * @extends module:workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    return { cacheKey };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See\n * [PrecacheRoute options]{@link module:workbox-precaching.PrecacheRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#matchPrecache} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call\n * {@link PrecacheController#matchPrecache} on that instance,\n * instead of using this function.\n *\n * @param {string|Request} request The key (without revisioning parameters)\n * to look up in the precache.\n * @return {Promise<Response|undefined>}\n *\n * @memberof module:workbox-precaching\n */\nfunction matchPrecache(request) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.matchPrecache(request);\n}\nexport { matchPrecache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof module:workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * [precache()]{@link module:workbox-precaching.precache} and\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See\n * [PrecacheRoute options]{@link module:workbox-precaching.PrecacheRoute}.\n *\n * @memberof module:workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:6.1.5'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof module:workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` +\n                    JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` +\n                    JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ` + response.status);\n                logger.log(`Response headers: ` +\n                    JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof module:workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A class that wraps common IndexedDB functionality in a promise-based API.\n * It exposes all the underlying power and functionality of IndexedDB, but\n * wraps the most commonly used features in a way that's much simpler to use.\n *\n * @private\n */\nexport class DBWrapper {\n    /**\n     * @param {string} name\n     * @param {number} version\n     * @param {Object=} [callback]\n     * @param {!Function} [callbacks.onupgradeneeded]\n     * @param {!Function} [callbacks.onversionchange] Defaults to\n     *     DBWrapper.prototype._onversionchange when not specified.\n     * @private\n     */\n    constructor(name, version, { onupgradeneeded, onversionchange, } = {}) {\n        this._db = null;\n        this._name = name;\n        this._version = version;\n        this._onupgradeneeded = onupgradeneeded;\n        this._onversionchange = onversionchange || (() => this.close());\n    }\n    /**\n     * Returns the IDBDatabase instance (not normally needed).\n     * @return {IDBDatabase|undefined}\n     *\n     * @private\n     */\n    get db() {\n        return this._db;\n    }\n    /**\n     * Opens a connected to an IDBDatabase, invokes any onupgradedneeded\n     * callback, and added an onversionchange callback to the database.\n     *\n     * @return {IDBDatabase}\n     * @private\n     */\n    async open() {\n        if (this._db)\n            return;\n        this._db = await new Promise((resolve, reject) => {\n            // This flag is flipped to true if the timeout callback runs prior\n            // to the request failing or succeeding. Note: we use a timeout instead\n            // of an onblocked handler since there are cases where onblocked will\n            // never never run. A timeout better handles all possible scenarios:\n            // https://github.com/w3c/IndexedDB/issues/223\n            let openRequestTimedOut = false;\n            setTimeout(() => {\n                openRequestTimedOut = true;\n                reject(new Error('The open request was blocked and timed out'));\n            }, this.OPEN_TIMEOUT);\n            const openRequest = indexedDB.open(this._name, this._version);\n            openRequest.onerror = () => reject(openRequest.error);\n            openRequest.onupgradeneeded = (evt) => {\n                if (openRequestTimedOut) {\n                    openRequest.transaction.abort();\n                    openRequest.result.close();\n                }\n                else if (typeof this._onupgradeneeded === 'function') {\n                    this._onupgradeneeded(evt);\n                }\n            };\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (openRequestTimedOut) {\n                    db.close();\n                }\n                else {\n                    db.onversionchange = this._onversionchange.bind(this);\n                    resolve(db);\n                }\n            };\n        });\n        return this;\n    }\n    /**\n     * Polyfills the native `getKey()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @return {Array}\n     * @private\n     */\n    async getKey(storeName, query) {\n        return (await this.getAllKeys(storeName, query, 1))[0];\n    }\n    /**\n     * Polyfills the native `getAll()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAll(storeName, query, count) {\n        return await this.getAllMatching(storeName, { query, count });\n    }\n    /**\n     * Polyfills the native `getAllKeys()` method. Note, this is overridden at\n     * runtime if the browser supports the native method.\n     *\n     * @param {string} storeName\n     * @param {*} query\n     * @param {number} count\n     * @return {Array}\n     * @private\n     */\n    async getAllKeys(storeName, query, count) {\n        const entries = await this.getAllMatching(storeName, { query, count, includeKeys: true });\n        return entries.map((entry) => entry.key);\n    }\n    /**\n     * Supports flexible lookup in an object store by specifying an index,\n     * query, direction, and count. This method returns an array of objects\n     * with the signature .\n     *\n     * @param {string} storeName\n     * @param {Object} [opts]\n     * @param {string} [opts.index] The index to use (if specified).\n     * @param {*} [opts.query]\n     * @param {IDBCursorDirection} [opts.direction]\n     * @param {number} [opts.count] The max number of results to return.\n     * @param {boolean} [opts.includeKeys] When true, the structure of the\n     *     returned objects is changed from an array of values to an array of\n     *     objects in the form {key, primaryKey, value}.\n     * @return {Array}\n     * @private\n     */\n    async getAllMatching(storeName, { index, query = null, // IE/Edge errors if query === `undefined`.\n    direction = 'next', count, includeKeys = false, } = {}) {\n        return await this.transaction([storeName], 'readonly', (txn, done) => {\n            const store = txn.objectStore(storeName);\n            const target = index ? store.index(index) : store;\n            const results = [];\n            const request = target.openCursor(query, direction);\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    results.push(includeKeys ? cursor : cursor.value);\n                    if (count && results.length >= count) {\n                        done(results);\n                    }\n                    else {\n                        cursor.continue();\n                    }\n                }\n                else {\n                    done(results);\n                }\n            };\n        });\n    }\n    /**\n     * Accepts a list of stores, a transaction type, and a callback and\n     * performs a transaction. A promise is returned that resolves to whatever\n     * value the callback chooses. The callback holds all the transaction logic\n     * and is invoked with two arguments:\n     *   1. The IDBTransaction object\n     *   2. A `done` function, that's used to resolve the promise when\n     *      when the transaction is done, if passed a value, the promise is\n     *      resolved to that value.\n     *\n     * @param {Array<string>} storeNames An array of object store names\n     *     involved in the transaction.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {!Function} callback\n     * @return {*} The result of the transaction ran by the callback.\n     * @private\n     */\n    async transaction(storeNames, type, callback) {\n        await this.open();\n        return await new Promise((resolve, reject) => {\n            const txn = this._db.transaction(storeNames, type);\n            txn.onabort = () => reject(txn.error);\n            txn.oncomplete = () => resolve();\n            callback(txn, (value) => resolve(value));\n        });\n    }\n    /**\n     * Delegates async to a native IDBObjectStore method.\n     *\n     * @param {string} method The method name.\n     * @param {string} storeName The object store name.\n     * @param {string} type Can be `readonly` or `readwrite`.\n     * @param {...*} args The list of args to pass to the native method.\n     * @return {*} The result of the transaction.\n     * @private\n     */\n    async _call(method, storeName, type, ...args) {\n        const callback = (txn, done) => {\n            const objStore = txn.objectStore(storeName);\n            // TODO(philipwalton): Fix this underlying TS2684 error.\n            // @ts-ignore\n            const request = objStore[method].apply(objStore, args);\n            request.onsuccess = () => done(request.result);\n        };\n        return await this.transaction([storeName], type, callback);\n    }\n    /**\n     * Closes the connection opened by `DBWrapper.open()`. Generally this method\n     * doesn't need to be called since:\n     *   1. It's usually better to keep a connection open since opening\n     *      a new connection is somewhat slow.\n     *   2. Connections are automatically closed when the reference is\n     *      garbage collected.\n     * The primary use case for needing to close a connection is when another\n     * reference (typically in another tab) needs to upgrade it and would be\n     * blocked by the current, open connection.\n     *\n     * @private\n     */\n    close() {\n        if (this._db) {\n            this._db.close();\n            this._db = null;\n        }\n    }\n}\n// Exposed on the prototype to let users modify the default timeout on a\n// per-instance or global basis.\nDBWrapper.prototype.OPEN_TIMEOUT = 2000;\n// Wrap native IDBObjectStore methods according to their mode.\nconst methodsToWrap = {\n    readonly: ['get', 'count', 'getKey', 'getAll', 'getAllKeys'],\n    readwrite: ['add', 'put', 'clear', 'delete'],\n};\nfor (const [mode, methods] of Object.entries(methodsToWrap)) {\n    for (const method of methods) {\n        if (method in IDBObjectStore.prototype) {\n            // Don't use arrow functions here since we're outside of the class.\n            DBWrapper.prototype[method] =\n                async function (storeName, ...args) {\n                    return await this._call(method, storeName, mode, ...args);\n                };\n        }\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Deletes the database.\n * Note: this is exported separately from the DBWrapper module because most\n * usages of IndexedDB in workbox dont need deleting, and this way it can be\n * reused in tests to delete databases without creating DBWrapper instances.\n *\n * @param {string} name The database name.\n * @private\n */\nexport const deleteDatabase = async (name) => {\n    await new Promise((resolve, reject) => {\n        const request = indexedDB.deleteDatabase(name);\n        request.onerror = () => {\n            reject(request.error);\n        };\n        request.onblocked = () => {\n            reject(new Error('Delete blocked'));\n        };\n        request.onsuccess = () => {\n            resolve();\n        };\n    });\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.1.5'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { DBWrapper } from 'workbox-core/_private/DBWrapper.js';\nimport { deleteDatabase } from 'workbox-core/_private/deleteDatabase.js';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst OBJECT_STORE_NAME = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._cacheName = cacheName;\n        this._db = new DBWrapper(DB_NAME, 1, {\n            onupgradeneeded: (event) => this._handleUpgrade(event),\n        });\n    }\n    /**\n     * Should perform an upgrade of indexedDB.\n     *\n     * @param {Event} event\n     *\n     * @private\n     */\n    _handleUpgrade(event) {\n        const db = event.target.result;\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n        // Previous versions of `workbox-expiration` used `this._cacheName`\n        // as the IDBDatabase name.\n        deleteDatabase(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        await this._db.put(OBJECT_STORE_NAME, entry);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const entry = await this._db.get(OBJECT_STORE_NAME, this._getId(url));\n        return entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const entriesToDelete = await this._db.transaction(OBJECT_STORE_NAME, 'readwrite', (txn, done) => {\n            const store = txn.objectStore(OBJECT_STORE_NAME);\n            const request = store.index('timestamp').openCursor(null, 'prev');\n            const entriesToDelete = [];\n            let entriesNotDeletedCount = 0;\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (cursor) {\n                    const result = cursor.value;\n                    // TODO(philipwalton): once we can use a multi-key index, we\n                    // won't have to check `cacheName` here.\n                    if (result.cacheName === this._cacheName) {\n                        // Delete an entry if it's older than the max age or\n                        // if we already have the max number allowed.\n                        if ((minTimestamp && result.timestamp < minTimestamp) ||\n                            (maxCount && entriesNotDeletedCount >= maxCount)) {\n                            // TODO(philipwalton): we should be able to delete the\n                            // entry right here, but doing so causes an iteration\n                            // bug in Safari stable (fixed in TP). Instead we can\n                            // store the keys of the entries to delete, and then\n                            // delete the separate transactions.\n                            // https://github.com/GoogleChrome/workbox/issues/1978\n                            // cursor.delete();\n                            // We only need to return the URL, not the whole entry.\n                            entriesToDelete.push(cursor.value);\n                        }\n                        else {\n                            entriesNotDeletedCount++;\n                        }\n                    }\n                    cursor.continue();\n                }\n                else {\n                    done(entriesToDelete);\n                }\n            };\n        });\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await this._db.delete(OBJECT_STORE_NAME, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof module:workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ?\n            Date.now() - (this._maxAgeSeconds * 1000) : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ?\n                    'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - (this._maxAgeSeconds * 1000);\n            return (timestamp < expireOlderThan);\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof module:workbox-core\n */\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached request is used or updated, this plugin will look\n * at the associated cache and remove any old or extra requests.\n *\n * When using `maxAgeSeconds`, requests may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached request has been used. If the request has a \"Date\" header, then\n * a light weight expiration check is performed and the request will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof module:workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - (this._maxAgeSeconds * 1000);\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","import {\r\n  NetworkFirst,\r\n  StaleWhileRevalidate,\r\n  CacheFirst\r\n} from 'workbox-strategies';\r\nimport { precacheAndRoute, matchPrecache } from 'workbox-precaching';\r\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response';\r\nimport { setCatchHandler, registerRoute} from 'workbox-routing';\r\n\r\n// Used for filtering matches based on status code, header, or both\r\n// Used to limit entries in cache, remove entries after a certain period of time\r\nimport { ExpirationPlugin } from 'workbox-expiration';\r\n\r\n// Cache page navigations (html) with a Network First strategy\r\nregisterRoute(\r\n  // Check to see if the request is a navigation to a new page\r\n  ({ request }) => request.mode === 'navigate',\r\n  // Use a Network First caching strategy\r\n  new NetworkFirst({\r\n    // Put all cached files in a cache named 'pages'\r\n    cacheName: 'pages',\r\n    plugins: [\r\n      // Ensure that only requests that result in a 200 status are cached\r\n      new CacheableResponsePlugin({\r\n        statuses: [200],\r\n      })\r\n    ],\r\n  })\r\n);\r\n\r\n// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy\r\nregisterRoute(\r\n  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or worker for web worker\r\n  ({ request }) =>\r\n    request.destination === 'style' ||\r\n    request.destination === 'script' ||\r\n    request.destination === 'worker',\r\n  // Use a Stale While Revalidate caching strategy\r\n  new StaleWhileRevalidate({\r\n    // Put all cached files in a cache named 'assets'\r\n    cacheName: 'assets',\r\n    plugins: [\r\n      // Ensure that only requests that result in a 200 status are cached\r\n      new CacheableResponsePlugin({\r\n        statuses: [200],\r\n      })\r\n    ],\r\n  })\r\n);\r\n\r\n// Cache images with a Cache First strategy\r\nregisterRoute(\r\n  // Check to see if the request's destination is style for an image\r\n  ({ request }) => request.destination === 'image',\r\n  // Use a Cache First caching strategy\r\n  new CacheFirst({\r\n    // Put all cached files in a cache named 'images'\r\n    cacheName: 'images',\r\n    plugins: [\r\n      // Ensure that only requests that result in a 200 status are cached\r\n      new CacheableResponsePlugin({\r\n        statuses: [200],\r\n      }),\r\n      // Don't cache more than 50 items, and expire them after 30 days\r\n      new ExpirationPlugin({\r\n        maxEntries: 50,\r\n        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 Days\r\n      })\r\n    ],\r\n  })\r\n);\r\n\r\n// Ensure your build step is configured to include /offline.html as part of your precache manifest.\r\nprecacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// Catch routing errors, like if the user is offline\r\nsetCatchHandler(async ({ event }) => {\r\n  // Return the precached offline page if a document is being requested\r\n  if (event.request.destination === 'document') {\r\n    return matchPrecache('/offline.html');\r\n  }\r\n\r\n  return Response.error();\r\n});\r\n"],"names":["self","_","e","fallback","code","args","msg","length","JSON","stringify","messageGenerator","WorkboxError","Error","constructor","errorCode","details","message","name","logger","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","join","eachCacheNameDetail","fn","key","Object","keys","cacheNames","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","getFriendlyURL","url","urlObj","URL","String","location","href","replace","RegExp","origin","stripParams","fullURL","ignoreParams","strippedURL","param","searchParams","delete","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","match","keysOptions","ignoreSearch","cacheKeys","cacheKey","strippedCacheKeyURL","Deferred","promise","Promise","resolve","reject","quotaErrorCallbacks","Set","executeQuotaErrorCallbacks","callback","timeout","ms","setTimeout","toRequest","input","Request","StrategyHandler","strategy","options","_cacheKeys","assign","event","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","set","waitUntil","fetch","mode","FetchEvent","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","iterateCallbacks","err","thrownError","pluginFilteredRequest","fetchResponse","undefined","fetchOptions","response","error","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","cachedResponse","effectiveRequest","getCacheKey","multiMatchOptions","caches","responseToCache","_ensureResponseSafeToCache","open","hasCacheUpdateCallback","oldResponse","put","newResponse","params","state","get","statefulCallback","statefulParam","push","doneWaiting","shift","destroy","pluginsUsed","status","Strategy","handle","responseDone","handleAll","handler","_getResponse","handlerDone","_awaitComplete","_handle","type","waitUntilError","CacheFirst","cacheOkAndOpaquePlugin","cacheWillUpdate","NetworkFirst","some","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","logs","promises","timeoutId","id","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","timeoutPromise","onNetworkTimeout","fetchError","clearTimeout","StaleWhileRevalidate","fetchAndCachePromise","catch","asyncFn","returnPromise","REVISION_SEARCH_PARAM","createCacheKey","entry","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","cachedResponseWillBeUsed","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","supportStatus","canConstructResponseFromBodyStream","testResponse","Response","body","copyResponse","modifier","responseURL","clonedResponse","responseInit","headers","Headers","statusText","modifiedResponseInit","blob","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","_handleInstall","_handleFetch","_useDefaultCacheabilityPluginIfNeeded","wasCached","defaultPluginIndex","cacheWillUpdatePluginCount","index","entries","defaultPrecacheCacheabilityPlugin","splice","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","bind","activate","addToCacheList","_installAndActiveListenersAdded","addEventListener","urlsToWarnAbout","cacheMode","has","firstEntry","secondEntry","integrity","warningMessage","console","warn","installReportPlugin","credentials","all","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getURLsToCacheKeys","getCachedURLs","matchPrecache","createHandlerBoundToURL","getOrCreatePrecacheController","defaultMethod","normalizeHandler","Route","method","setCatchHandler","catchHandler","RegExpRoute","regExp","result","exec","slice","Router","_routes","_defaultHandlerMap","routes","addFetchListener","responsePromise","handleRequest","respondWith","addCacheListener","data","payload","requestPromises","urlsToCache","map","ports","then","postMessage","protocol","startsWith","sameOrigin","route","findMatchingRoute","_catchHandler","catchErr","matchResult","Array","isArray","setDefaultHandler","registerRoute","unregisterRoute","routeIndex","indexOf","defaultRouter","getOrCreateDefaultRouter","capture","captureUrl","matchCallback","moduleName","funcName","paramName","removeIgnoredSearchParams","ignoreURLParametersMatching","test","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","precacheAndRoute","CacheableResponse","config","_statuses","statuses","_headers","isResponseCacheable","cacheable","includes","headerName","CacheableResponsePlugin","_cacheableResponse","dontWaitFor","DBWrapper","version","onupgradeneeded","onversionchange","_db","_name","_version","_onupgradeneeded","_onversionchange","close","db","openRequestTimedOut","OPEN_TIMEOUT","openRequest","indexedDB","onerror","evt","transaction","abort","onsuccess","getKey","storeName","query","getAllKeys","getAll","count","getAllMatching","includeKeys","direction","txn","done","store","objectStore","target","results","openCursor","cursor","continue","storeNames","onabort","oncomplete","_call","objStore","apply","prototype","methodsToWrap","readonly","readwrite","methods","IDBObjectStore","deleteDatabase","onblocked","DB_NAME","OBJECT_STORE_NAME","normalizeURL","unNormalizedUrl","CacheTimestampsModel","_cacheName","_handleUpgrade","createObjectStore","keyPath","createIndex","unique","setTimestamp","timestamp","_getId","getTimestamp","expireEntries","minTimestamp","maxCount","entriesToDelete","entriesNotDeletedCount","urlsDeleted","CacheExpiration","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_matchOptions","_timestampModel","Date","now","urlsExpired","updateTimestamp","isURLExpired","expireOlderThan","Infinity","registerQuotaErrorCallback","add","ExpirationPlugin","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","parsedDate","headerTime","getTime","isNaN","destination","__WB_MANIFEST"],"mappings":"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AAAA,kBAAkB,GAAG,IAAIkC,kBAAJ,EAArB;IACH;;IACD,SAAOlC,kBAAP;IACH,CALM;;ICZP,IAAI;IACAxM,EAAAA,IAAI,CAAC,uBAAD,CAAJ,IAAiCC,CAAC,EAAlC;IACH,CAFD,CAGA,OAAOC,CAAP,EAAU;;ICLV;IACA;AACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACO,MAAMuQ,aAAa,GAAG,KAAtB;;IChBP;IACA;AACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;;IACO,MAAMC,gBAAgB,GAAIhH,OAAD,IAAa;IACzC,MAAIA,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAAlC,EAA4C;;IASxC,WAAOA,OAAP;IACH,GAVD,MAWK;;IASD,WAAO;IAAEH,MAAAA,MAAM,EAAEG;IAAV,KAAP;IACH;IACJ,CAvBM;;IChBP;IACA;AACA;IACA;IACA;IACA;IACA;IAKA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,MAAMiH,KAAN,CAAY;IACR;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACI9P,EAAAA,WAAW,CAACsD,KAAD,EAAQuF,OAAR,EAAiBkH,MAAM,GAAGH,aAA1B,EAAyC;IAahD;;;IACA,SAAK/G,OAAL,GAAegH,gBAAgB,CAAChH,OAAD,CAA/B;IACA,SAAKvF,KAAL,GAAaA,KAAb;IACA,SAAKyM,MAAL,GAAcA,MAAd;IACH;IACD;IACJ;IACA;IACA;IACA;;;IACIC,EAAAA,eAAe,CAACnH,OAAD,EAAU;IACrB,SAAKoH,YAAL,GAAoBJ,gBAAgB,CAAChH,OAAD,CAApC;IACH;;IArCO;;ICpBZ;IACA;AACA;IACA;IACA;IACA;IACA;IAKA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,MAAMqH,WAAN,SAA0BJ,KAA1B,CAAgC;IAC5B;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;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"}