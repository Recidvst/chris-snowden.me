export function Scrambler(t) { try { const n = function () { return Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 1) }; let r = !!(e = t) && e.constructor === Object || "object" == typeof t; r && (t.target = void 0 !== t.target && r ? t.target : "[data-scrambler]", t.random = void 0 !== t.random && r ? t.random : [1e3, 3e3], t.speed = void 0 !== t.speed && r ? t.speed : 100); const o = function () { return r ? t.random[0] + (Math.random() * (1 - t.random[1]) + t.random[1]) : -2999 * Math.random() + 3e3 + 1e3 }; !function (t) { (r ? [...document.querySelectorAll(t.target)] : [...document.querySelectorAll(t)]).forEach(function (e, r) { if ("true" !== e.getAttribute("data-scramble-active")) { e.setAttribute("data-scramble-active", "true"); let r = e.textContent.split(""), a = e.innerHTML, c = e.textContent.split(""), i = [], l = t.speed ? t.speed : 100; const d = setInterval(function () { r.map((t, a) => { " \t\n\r\v".indexOf(t) > -1 || (c[a] = n(), setTimeout(function () { i[a] = !0 }, o()), !0 === i[a] && (c[a] = r[a]), e.textContent = c.join("")) }); let t = c.length == r.length && c.every(function (t, e) { return t === r[e] }); t && (e.innerHTML = a, clearInterval(d), e.setAttribute("data-scramble-active", "false")) }, l) } }) }(t) } catch (t) { console.trace("%cuh-oh: %c" + t, "color:indianred;", "color:cornflowerblue;") } var e };
//# sourceMappingURL=data:application/json;charset=utf8;base64,
